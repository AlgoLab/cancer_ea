'''

   see README in the same directory as this Snakefile for instructions
   on how to rerun this workflow

'''

# softwares
_sasc_ = 'softwares/sasc/sasc'


# parameters
files = ['/home/lxc_prj_ppp/miniconda3/envs/environment/cancer_gp/data/simulated/exp1/sim1_scs.txt']
kappas = [0, 1]
alphas = [0.05, 0.1, 0.15]
betas = [0.001, 0.0001, 0.00001]

popsizes = [7]
maxgens = [3]

crossprobs = [0.01, 0.02, 0.04, 0.08, 0.16, 0.32, 0.64, 0.96]
mutprobs = [0.01, 0.02, 0.04, 0.08, 0.16, 0.32, 0.64, 0.96]

# for sasc
ks = [2]
ds = [5]
rs = [1]


#
# master rule
#----------------------------------------------------------------------
rule master :
	input :
		expand('{file}.in_results_cgp/cgp-k{kappa}-a{alpha}-b{beta}-pop{popsize}-maxgen{maxgen}-cross{crossprob}-mut{mutprob}-tour{toursize}-rand{seed}.out',
			file = files,
			kappa = kappas,
			alpha = alphas,
			beta = betas,
			popsize = popsizes,
			maxgen = maxgens,
			crossprob = crossprobs,
			mutprob = mutprobs,
			toursize = 3.5,
			seed = -1)

# for sasc
rule sasc :
	input :
		expand('{file}.sasc-a{alpha}-b{beta}-k{k}-d{d}-r{r}.out',
			file = files,
			alpha = alphas,
			beta = betas,
			k = ks,
			d = ds,
			r = rs)


#
# install the softwares
#----------------------------------------------------------------------

# sasc
sasc_files = 'mt19937ar sasc sastep tree utils vector'.split()
rule download_sasc :
	output : expand('softwares/sasc/{file}.c', file = sasc_files)
	message : 'downloading sasc ...'
	shell : '''

   mkdir -p softwares
   cd softwares
   git clone https://github.com/sciccolella/sasc.git '''
	
rule install_sasc :
	input : expand('softwares/sasc/{file}.c', file = sasc_files)
	params :
		std = 'gnu99',
		debug = '-g'
	output : _sasc_
	message : 'installing sasc ...'
	shell : 'gcc -o {output} {input} -std={params.std} {params.debug} -lm'


#
# run sasc
#----------------------------------------------------------------------
rule run_sasc :
	input :
		program = _sasc_,
		matrix = '{file}.txt'

	output : '{file}.sasc-a{alpha}-b{beta}-k{k}-d{del}-r{reps}.out'

	log : '{file}.sasc-a{alpha}-b{beta}-k{k}-d{del}-r{reps}.log'

	message : '''

   running sasc ({input.program}) on
   {input.matrix} with
   alpha = {wildcards.alpha}, beta = {wildcards.beta}, k = {wildcards.k},
   d = {wildcards.del}, r = {wildcards.reps} '''

       	run :
		with open(input.matrix) as M :
			m = len(M.readline().split())
			n = sum(1 for line in M) + 1
		shell('''

   {input.program} -i {input.matrix} \
      -n {n} -m {m} \
      -a {wildcards.alpha} -b {wildcards.beta} -k {wildcards.k} \
      -d {wildcards.del} -r {wildcards.reps} \
         > {output} 2> {log} ''')

#
# run cancer gp
#----------------------------------------------------------------------
rule run_cgp :
	input :
		prgm = '/home/lxc_prj_ppp/miniconda3/envs/environment/cancer_gp/main.py',
                matrix = '{file}.in'

	output : '{file}.in_results_cgp/cgp-k{kappa}-a{alpha}-b{beta}-pop{popsize}-maxgen{maxgen}-cross{crossprob}-mut{mutprob}-tour{toursize}-rand{seed}.out'

	log : '{file}.in_results_cgp/cgp-k{kappa}-a{alpha}-b{beta}-pop{popsize}-maxgen{maxgen}-cross{crossprob}-mut{mutprob}-tour{toursize}-rand{seed}.log'

	shell : '''

   python {input.prgm} inputfile={input.matrix} \
      dollok={wildcards.kappa} alpha={wildcards.alpha} beta={wildcards.beta} \
      populationsize={wildcards.popsize} maxnumbergenerations={wildcards.maxgen} \
      crossoverprobability={wildcards.crossprob} mutationprobability={wildcards.mutprob} \
      finegrainedtournamentsize={wildcards.toursize} randomseed={wildcards.seed} \
         > {output} 2> {log} '''
